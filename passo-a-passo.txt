========================================================
        Criando um Clone do BuzzFeed com Angular
========================================================

--------------------------------------------------------
                      ESTRUTURA BASE
--------------------------------------------------------

- Criar um novo projeto;
- Criar pasta components e os arquivos de quizz components;
- Criar a pasta pages e home com os arquivos home;
- Configurar o reset do css principal style.css;
- Configurar o arquivo tsconfig.jason adicionando:

    "resolveJsonModule": true,
    "allowSyntheticDefaultImports": true,

- Remover o conteúdo contido no arquivo app.component.html
deixando apenas a tag <router-outlet></router-outlet> que
fica no final do arquivo;
- Copiar o selector do arquivo home.component.ts e colar no
arquivo app.component.html: <app-home></app-home>;
- No arquivo home.component.html criar uma div e adicionar
dentro a tag do app-quiz:

<div class="home__container">
    <app-quizz></app-quizz>
</div>

- Criar a pasta data e a pasta img dentro da pasta assets;
- Criar o aqruivo quizz_question.json na pasta data e
adicionar a logo BuzzFeed na pasta img;

--------------------------------------------------------
                  ESTILIZAÇÃO DO PROJETO
--------------------------------------------------------
- Criar o esqueleto da página no arquivo quizz.component.html;
- Estilizar a página no arquivo quizz.component.css

--------------------------------------------------------
                   PROPRIEDADES LÓGICAS
--------------------------------------------------------
- No arquivo quizz.component.ts criar a propriedade title:

title:string = ""

- Copiar o nome da propriedade title e colar na interpolação
dentro do arquivo quizz.component.html:

<h3>{{ title }}</h3>

- No arquivo quizz.component.ts criar as propriedades quizz_questions
e questionSelected:

  questions:any = ""
  questionSelected:any = ""

- Copiar o nome da propriedade questionSelected e colar na
interpolação dentro do aquivo quizz.component.html seguido
de .question:

 <div class="quizz_questions">
    <h3>{{ questionSelected.question }}</h3>
  </div>

- Criar as propriedades answers e answerSelected no arquivo
quizz.component.ts:

  answers:string[] = []
  answerSelected:string = ""

- Criar as propriedades questionIndex e questionMaxIndex = 0:

  questionIndex: number = 0
  questionMaxIndex = 0

- Criar a propriedade finished no arquivo quiz.component.ts:

  finished:boolean = false

*obs: finished fica como false por padrão;

--------------------------------------------------------
                      REGRAS DO jOGO
--------------------------------------------------------
- Importar o arquivo quizz_questions.json para o arquivo
quizz.component.ts;
- No arquivo quizz.component.ts adicionar as regras
criando métodos na área ngOnInit:

ngOnInit(): void {
    if(quizz_questions) {
      this.finished = false
      this.title = quizz_questions.title

      this.questions = quizz_questions.questions
      this.questionSelected = this.questions[this.questionIndex]

      this.questionIndex = 0
      this.questionMaxIndex = this.questions.length
    }

    playerChosse(value:string) {
    this.answers.push(value)
    this.nexStep()
  }

 async nexStep() {
    this.questionIndex+=1

    if(this.questionIndex > this.questionIndex){
      this.questionSelected = this.questions[this.questionIndex]
    }else{
      this.finished = true
      this.answerSelected = quizz_questions.results[finalAnswer as keyof
      typeof quizz_questions.results]
    }
  }

   async checkResult(answers:string[]) {
    const result = answers.reduce((previous, current, i, arr)=> {
      if(
        arr.filter(item => item === previous).length >
        arr.filter(item => item === current).length
        ){
          return previous
        }else{
          return current
        }
    })
    return result
}

- No arquivo quizz.component.html mudar os elementos estáticos
por dinâmicos utilizando a interpolação:

 <div *ngIf=finished class="quizz_results">
    <h1>O seu resultado é: </h1>
    <p>{{ answerSelected }}</p>
  </div>

--------------------------------------------------------
                  CALCULANDO O RESULTADO
--------------------------------------------------------
- No arquivo quizz.component.htm adicionar *ngIf="!finished":

<div *ngIf="!finished" class="quizz_questions">
    <h3>{{ questionSelected.question }}</h3>
  </div>

  <div *ngIf="!finished" class="quizz_options">
    <button *ngFor="let option of questionSelected.options; let i = index"
    (click)="playerChosse(option.alias)"
    class="btn-option">
      {{ option.name }}
    </button>
  </div>

- No arquivo quizz.component.ts criar o metodo:

async checkResult(answers:string[]) {
    const result = answers.reduce((previous, current, i, arr)=> {
      if(
        arr.filter(item => item === previous).length >
        arr.filter(item => item === current).length
        ){
          return previous
        }else{
          return current
        }
    })
    return result
  }


========================================================
        Criação do arquivo quizz_questions.json
========================================================
- Criado em duas etapas a primeira um Array e a segunda objeto;
- Título, questions e results;
- Dentro da área de questions estão todas as perguntas que
serão feitas quando o projto for executado;
- Cada question possui: id, question, options e cada options
possui um id, name e alias;
- No caso do arquivo deste projeto foram feitos 5 questions;
- Dentro da área results existem os objetos "A" e "B", que
serão as respostas para o resultado do somatório das respotas
obtidas nas perguntas;
